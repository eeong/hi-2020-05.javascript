var Slide = function(arg){
	this.slide = arg.slide;
	this.title = arg.slideTitle || null;
	this.$slides = [];
	this.container = arg.container;
	this.$container = $(this.container);
	this.direction = arg.direction || 'horizental';
	this.delay = arg.delay || '3000';
	this.speed = arg.speed || '500';
	this.auto = arg.auto || false;
	this.pager= arg.pager || false;
	this.btnUse= arg.btnUse || true;
	this.viewCount = arg.viewCount || 4;
	this.userMargin = arg.userMargin || 0;
	this.leftValue = 0;
	this.wid = 0;
	this.wrapWid = 0;
	this.$btnPrev = null;
	this.$btnNext = null;
	this.$pagerWrap = null;
	this.now = 0;
	this.last = 0;
	this.init();

	return this;
}

Slide.prototype.init = function(){
	this.$container.css({"overflow": "hidden" , "position":"relative"})
	this.$wrapper = $('<div class="custom-wrapper custom-'+ this.direction +  ' " ></div>').appendTo(this.$container);
	
	
	for (var i in this.slide){
		html ='';
		if(this.direction == 'step') html += '<div class="custom-slide" style="background-image:url(\''+this.slide[i]+ '\'")</div>';
		else html += '<div class="custom-slide">';
		html += '<img src='+this.slide[i]+' class="custom-img slide w100">';
		if(this.title && this.title[i]) html += this.title[i];
		html += '</div>';
		
		if(this.direction == "horizental" || this.direction === "vertical" ) {this.$slides.push( $(html).appendTo(this.$wrapper)); }
		if(this.direction == "fade" || this.direction == "step") this.$slides.push($(html));
	}
	
	if(this.direction == "horizental" || this.direction == "vertical"){
		this.$slides.push($(this.$slides[0].clone().appendTo(this.$wrapper)));
	}
	
	if(this.direction == "fade") $(this.$slides[0].clone()).appendTo(this.$wrapper);
	
	if(this.direction == "step") $(this.$slides[0].clone()).appendTo(this.$wrapper);

	if(this.title) this.title.push(this.title[0]);

	this.last = this.$slides.length - 1;

	if(this.btnUse){
		this.$btnPrev = $("<div class='btn-custom custom-prev'> 〈 </div>").appendTo(this.$container);
		this.$btnNext = $("<div class='btn-custom custom-next'> 〉 </div>").appendTo(this.$container);
		this.$btnPrev.click(this.onClickPrev.bind(this)); 
		this.$btnNext.click(this.onClickNext.bind(this));
	}
	
	if(this.pager){
		this.$pagerWrap = $('<div class="custom-pager-wrap"></div>').appendTo(this.$container);
		for(var i in this.slide){
		$("<div class='custom-pager'></div>").appendTo(this.$pagerWrap).click(this.onPagerClick.bind(this));
	}
	this.$pagerWrap.find(".custom-pager").eq(0).addClass("active");
	}

	if(this.auto){
		this.$container.mouseover(this.onMouseOver.bind(this)).mouseleave(this.onMouseLeave.bind(this));
		this.interval = setInterval(this.onInterval.bind(this) , this.delay);
	}

	if(this.direction !== 'step'){var html = '<img src='+ this.slide[0] + ' style="width:100%; opacity:0">';
	this.$container.append(html);}
	else{
		this.startInit();
		$(window).resize(function onResize(){
			var winWid = $(window).innerWidth();
			var cnt = this.viewCount;
			if(winWid >= 1200){
				this.stepCalc(cnt);
			}
			else if(winWid < 1200){
				this.stepCalc(cnt-1 < 1 ? 1 : cnt -1);
			}
			else if(winWid < 992){
				this.stepCalc(cnt-2 < 1 ? 1 : cnt -2);		
			}
			else if(winWid < 768){
				this.stepCalc(cnt-3 < 1 ? 1 : cnt -3);
			}
			else if(winWid < 576){
				this.stepCalc(cnt-4 < 1 ? 1 : cnt -4);
			}
		}.bind(this)).trigger('resize');}
}

Slide.prototype.onPagerClick = function(e){
	this.now = $(e.currentTarget).index();
	this.ani();
}

Slide.prototype.onMouseOver = function(){
	clearInterval(this.interval);

}

Slide.prototype.onMouseLeave = function(){
	this.interval = setInterval(this.onInterval.bind(this) , this.delay);
}

Slide.prototype.onClickPrev = function(e){
	if(this.now == 0) {
		if(this.direction ==="horizental" || this.direction === "vertical"){
			this.now = this.last - 1;
			this.$wrapper.css(this.direction === 'horizental' ? 'left' : 'top', -100 * this.last+ "%"); 
		}
		if(this.direction === "fade")	this.now = this.last;
	}
	else this.now--;
	
	this.ani();
};

Slide.prototype.onClickNext = function(e){
	if(this.now == this.last){
		if(this.direction ==="horizental" || this.direction === "vertical"){	this.now = 1;
		this.$wrapper.css(this.direction === 'horizental' ? 'left' : 'top',0);}
		if(this.direction === "fade") this.now = 0;
	}else this.now++;
	this.ani();
}


Slide.prototype.onInterval = function(){
	if(this.auto === "true") this.onClickNext();
}

Slide.prototype.ani = function(){
		
	if(this.pager){
		this.$pagerWrap.find(".custom-pager").eq(this.now).addClass("active").siblings().removeClass("active");
		if(this.direction == "horizental" || this.direction == "vertical") {
		if(this.now == this.last) this.$pagerWrap.find(".custom-pager").eq(0).addClass("active").siblings().removeClass("active");
	}
	}

	if(this.direction == "horizental"){
		this.$wrapper.stop().animate({"left": -100*this.now+ "%"} , this.speed);
	}
	else if(this.direction == "vertical"){
		this.$wrapper.stop().animate({"top": -100*this.now+ "%"} , this.speed);
	}
	else if(this.direction == "fade"){
		$(this.$slides[this.now]).clone().appendTo(this.$wrapper).css("opacity",0).stop().animate({opacity: 1 } , this.speed , function(){
			$(this).prev().remove();
		});
	}
	else if(this.direction == "step"){
	
	}
}

Slide.prototype.startInit = function(){

$(this.$slides[this.now].clone()).appendTo(this.$wrapper.empty().attr("style",""));

}

Slide.prototype.stepCalc = function(viewCount){
	this.wrapWid = ((100/viewCount)*(viewCount+2)).toFixed(4);
	this.wid = (100/(viewCount+2)).toFixed(4);
	this.leftValue = (-(100/viewCount)).toFixed(4);
	this.$wrapper.css({"width": this.wrapWid+"%" , "left": this.leftValue+"%" });
	this.$wrapper.find(".custom-slide").css({"flex" : "calc("+this.wid+"% - "+ this.userMargin*2 +"px) 0 0" , "margin":"0 "+ this.userMargin + "px"});
	
}



